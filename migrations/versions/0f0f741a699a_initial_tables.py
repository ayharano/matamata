"""initial tables

Revision ID: 0f0f741a699a
Revises: 
Create Date: 2024-01-05 06:53:21.716643

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0f0f741a699a'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('competitor',
    sa.Column('label', sa.String(length=255), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sa.Uuid(), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.CheckConstraint("NOT(TRIM(label) LIKE '')", name='competitor_label_not_empty_nor_whitespace_only'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('tournament',
    sa.Column('label', sa.String(length=255), nullable=False),
    sa.Column('matchesCreation', sa.DateTime(), nullable=True),
    sa.Column('numberCompetitors', sa.Integer(), nullable=True),
    sa.Column('startingRound', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sa.Uuid(), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.CheckConstraint("NOT(TRIM(label) LIKE '')", name='tournament_label_not_empty_nor_whitespace_only'),
    sa.CheckConstraint('( matchesCreation IS NULL AND numberCompetitors IS NULL AND startingRound IS NULL) OR ( matchesCreation IS NOT NULL AND numberCompetitors IS NOT NULL AND startingRound IS NOT NULL AND numberCompetitors >= 1 AND startingRound >= 0)', name='tournament_matchesCreation_competitors_startingRound_must_be_all_null_or_all_set_under_conditions'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('match',
    sa.Column('tournament_id', sa.Integer(), nullable=False),
    sa.Column('round', sa.Integer(), nullable=False),
    sa.Column('position', sa.Integer(), nullable=False),
    sa.Column('competitorA_id', sa.Integer(), nullable=True),
    sa.Column('competitorB_id', sa.Integer(), nullable=True),
    sa.Column('resultRegistration', sa.DateTime(), nullable=True),
    sa.Column('winner_id', sa.Integer(), nullable=True),
    sa.Column('loser_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sa.Uuid(), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.CheckConstraint('( competitorA_id IS NULL AND competitorB_id IS NULL) OR ( competitorA_id <> competitorB_id)', name='match_non_null_competitors_cannot_be_the_same'),
    sa.CheckConstraint('( resultRegistration IS NULL AND loser_id is NULL) OR ( resultRegistration IS NOT NULL AND loser_id is NULL) OR ( resultRegistration IS NOT NULL AND loser_id IS NOT NULL)', name='match_result_registration_loser'),
    sa.CheckConstraint('( resultRegistration IS NULL AND winner_id is NULL) OR ( resultRegistration IS NOT NULL AND winner_id IS NOT NULL)', name='match_result_registration_winner'),
    sa.CheckConstraint('( round == 0 AND position < 2) OR ( round > 0 AND position < pow(2, round))', name='match_round_position_values'),
    sa.CheckConstraint('position >= 0', name='match_position_non_negative'),
    sa.CheckConstraint('round >= 0', name='match_round_non_negative'),
    sa.ForeignKeyConstraint(['competitorA_id'], ['competitor.id'], ),
    sa.ForeignKeyConstraint(['competitorB_id'], ['competitor.id'], ),
    sa.ForeignKeyConstraint(['loser_id'], ['competitor.id'], ),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournament.id'], ),
    sa.ForeignKeyConstraint(['winner_id'], ['competitor.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tournament_id', 'round', 'position', name='match_tournament_round_position_unique'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('tournament_competitor',
    sa.Column('tournament_id', sa.Integer(), nullable=False),
    sa.Column('competitor_id', sa.Integer(), nullable=False),
    sa.Column('next_match_id', sa.Integer(), nullable=True),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['competitor_id'], ['competitor.id'], ),
    sa.ForeignKeyConstraint(['next_match_id'], ['match.id'], ),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournament.id'], ),
    sa.PrimaryKeyConstraint('tournament_id', 'competitor_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('tournament_competitor')
    op.drop_table('match')
    op.drop_table('tournament')
    op.drop_table('competitor')
    # ### end Alembic commands ###
